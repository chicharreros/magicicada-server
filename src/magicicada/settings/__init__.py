# Copyright 2008-2015 Canonical
# Copyright 2015 Chicharreros (https://launchpad.net/~chicharreros)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# For further info, check  http://launchpad.net/magicicada-server

"""Django settings for magicicada project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

from __future__ import unicode_literals

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import urllib

from psycopg2.extensions import ISOLATION_LEVEL_REPEATABLE_READ


def get_postgres_uri(store_settings):
    """Return a postgres connection uri."""
    db_name = store_settings['NAME']
    host = urllib.quote(store_settings['HOST'], safe='')
    port = store_settings['PORT']
    username = store_settings['USER']
    password = store_settings.get('PASSWORD', '')
    options = store_settings.get('OPTIONS')
    if password:
        password = ':' + password
    uri = 'postgres://'
    if username:
        uri += '%s%s@' % (username, password)
    uri += '%s:%s/%s' % (host, port, db_name)
    if options:
        uri += '?%s' % urllib.urlencode(options)
    return uri


BASE_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.dirname(
        os.path.abspath(__file__)))))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%kj2ks+76)v=*@@wbz&b&fe8k$aax41q+6dy((q684uh#ttwa%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'magicicada.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'magicicada.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

PG_HOST = os.environ.get('PG_HOST', '/dev/shm/pg_magicicada')
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'filesync',
        'HOST': PG_HOST,
        'USER': 'postgres',
        'OPTIONS': {
            'isolation_level': ISOLATION_LEVEL_REPEATABLE_READ,
        },
    },
    'filesync': {
        'ENGINE': 'storm.django.backend',
        'NAME': 'filesync',
        'HOST': PG_HOST,
        'PORT': 5432,
        'USER': 'postgres',
        'OPTIONS': {'isolation': 'repeatable-read'},
    },
}

DATABASE_ENGINE = DATABASES['default']['ENGINE']
DATABASE_NAME = DATABASES['default']['NAME']
DATABASE_USER = ''
DATABASE_PASSWORD = ''
DATABASE_HOST = ''
DATABASE_PORT = ''

STORM_STORES = {
    'filesync': get_postgres_uri(DATABASES['filesync']),
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'


# Custom settings

APP_NAME = 'filesync'
ENVIRONMENT_NAME = 'development'
GRAPHITE_ADMIN_PASSWORD = 'pwadmin'
GRAPHITE_ADMIN_USER = 'admin'
INSTANCE_ID = 1
LOG_FOLDER = os.path.join(BASE_DIR, 'tmp')
LOG_FORMAT = '%(asctime)s %(levelname)-8s %(name)s[%(process)d]: %(message)s'
LOG_LEVEL = 5
LOG_TO_SYSLOG = False
OOPS_PATH = os.path.join(BASE_DIR, 'tmp', 'oops')
PUBLIC_URL_PREFIX = 'http://some_url'
ROOT_USERVOLUME_NAME = 'Magicicada'
ROOT_USERVOLUME_PATH = '~/' + ROOT_USERVOLUME_NAME
SERVICE_GROUP = 'filesync'
SERVICE_NAME = 'server'
STATSD_SERVERS = 'localhost:8125'
STORAGE_PROXY_PORT = None
SYSLOG_FORMAT = (
    '%(processName)-13s %(levelname)-8s %(name)s[%(process)d]: %(message)s')

from . import api_server  # noqa
from . import ssl_proxy  # noqa


try:
    from magicicada.settings.local import *  # noqa
except ImportError:
    pass
